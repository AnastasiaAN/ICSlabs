#Execution begins at address 0
	.pos 0
init:	irmovl Stack,%esp
		irmovl Stack,%ebp
		call Main
		halt

.align 4
# Source block
src:
.long 0x00a
.long 0x0b0
.long 0xc00
# Destination block
dest:
.long 0x111
.long 0x222
.long 0x333

Main:	pushl %ebp
		rrmovl %esp,%ebp
		irmovl $3,%eax
		pushl %eax
		irmovl dest,%eax
		pushl %eax
		irmovl src,%eax
		pushl %eax
		irmovl $0,%eax #result
		pushl %ebp
		rrmovl %esp,%ebp
		#store callee-saved registers
		pushl %esi
		pushl %ebx
		pushl %edi
		mrmovl 12(%ebp),%edx #len
		mrmovl 8(%ebp),%ecx #dest
		mrmovl 4(%ebp),%ebx #src
Loop:	andl %edx,%edx
		je End
		mrmovl (%ebx),%esi #val
		irmovl $4,%edi
		addl %edi,%ebx #src++
		rmmovl %esi,(%ecx)
		addl %edi,%ecx #dest++
		xorl %esi,%eax
		irmovl $1,%edi
		subl %edi,%edx
		jmp Loop
		#restore callee-saved registers
End:	popl %edi
		popl %ebx
		popl %esi
		popl %ebp
		rrmovl %ebp,%esp
		popl %ebp
		ret
#The stack starts here and grows to lower addresser
		.pos 0x100
Stack:
