#Execution begins at address 0
	.pos 0
init:	irmovl Stack,%esp
		irmovl Stack,%ebp
		call Main
		halt

# Sample linked list
.align 4
ele1:
	.long 0x00a
	.long ele2
ele2:
	.long 0x0b0
	.long ele3
ele3:
	.long 0xc00
	.long 0

Main:	pushl %ebp
		rrmovl %esp,%ebp
		irmovl ele1,%eax
		pushl %eax
		call sum_list
		ret
sum_list:	pushl %ebp
			rrmovl %esp,%ebp
			#store callee-saved registers
			pushl %ebx
			pushl %edi
			pushl %esi
			mrmovl 8(%ebp),%ebx	#ls
			irmovl $0,%eax #val
			andl %ebx,%ebx
			je End
Loop:		mrmovl (%ebx),%edi #ls->val
			addl %edi,%eax
			mrmovl 4(%ebx),%esi #ls->next
			rrmovl %esi,%ebx
			andl %ebx,%ebx
			jne Loop
			#restore callee-saved registers
End:		popl %esi
			popl %edi
			popl %ebx
			rrmovl %ebp,%esp
			popl %ebp
			ret

#The stack starts here and grows to lower addresser
			.pos 0x100
Stack:
